type Buyer = record {
  id : nat64;
  "principal" : principal;
  name : text;
  email : opt text;
  organization : opt text;
  phone_number : text;
  location : text;
};
type BuyerPayload = record {
  name : text;
  email : opt text;
  organization : opt text;
  phone_number : text;
  location : text;
};
type ContractStatus = variant {
  Terminated;
  Inactive;
  Active;
  Completed;
  Pending;
};
type CropContract = record {
  id : nat64;
  buyer_accepted : bool;
  terms_and_conditions : text;
  expected_month_of_harvest : text;
  price_per_unit : nat64;
  crop : text;
  land_size : nat64;
  buyer : opt principal;
  expected_yield : nat64;
  farmer : nat64;
  contract_status : ContractStatus;
};
type CropContractPayload = record {
  terms_and_conditions : text;
  expected_month_of_harvest : text;
  price_per_unit : nat64;
  crop : text;
  land_size : nat64;
  expected_yield : nat64;
  farmer : nat64;
  contract_status : ContractStatus;
};
type Farmer = record {
  id : nat64;
  updated_at : opt nat64;
  "principal" : principal;
  size_of_land : nat64;
  name : text;
  created_at : nat64;
  national_id : text;
  email : opt text;
  phone_number : text;
  location : text;
  croptypes : vec text;
};
type FarmerPayload = record {
  size_of_land : nat64;
  name : text;
  national_id : text;
  email : opt text;
  phone_number : text;
  location : text;
  croptypes : vec text;
};
type Result = variant { Ok : CropContract; Err : text };
type Result_1 = variant { Ok : Buyer; Err : text };
type Result_2 = variant { Ok : Farmer; Err : text };
service : {
  accept_contract : (nat64) -> (Result);
  add_buyer : (BuyerPayload) -> (opt Buyer);
  add_crop_contract : (CropContractPayload) -> (opt CropContract);
  add_farmer : (FarmerPayload) -> (opt Farmer);
  get_all_crop_contracts : () -> (vec CropContract) query;
  get_buyer : (nat64) -> (Result_1) query;
  get_contracts_by_buyer : (principal) -> (vec CropContract) query;
  get_contracts_by_contract_status : (ContractStatus) -> (
      vec CropContract,
    ) query;
  get_contracts_by_farmer : (nat64) -> (vec CropContract) query;
  get_crop_contract : (nat64) -> (Result) query;
  get_farmer : (nat64) -> (Result_2) query;
}
